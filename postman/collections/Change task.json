{
	"info": {
		"_postman_id": "574daaaa-1c48-4428-b220-4eed9a068fb0",
		"name": "Change task",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "18927542-574daaaa-1c48-4428-b220-4eed9a068fb0"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "12d6e5da-ba1f-494d-820f-f1fd3d292cdd",
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.environment.set('token', jsonData.id_token)",
							"",
							"//Преобразование тестов с помощью библиотеки Chai",
							"let expect = require('chai').expect;",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Status message is OK\", function () {",
							"    expect(pm.response.status).to.equal(\"OK\");",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    expect(pm.response.text()).to.include(\"id\");",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"Connection is close\", function () {",
							"    expect(pm.response.headers.get(\"Connection\")).to.equal(\"close\");",
							"});",
							"",
							"pm.test(\"X-Content-Type-Options is nosniff\", function(){",
							"    expect(pm.response.headers.get(\"X-Content-Type-Options\")).to.equal(\"nosniff\");",
							"});",
							"",
							"//Проверка даты в заголовке ответа на соответствие текущей дате(библиотека moment)",
							"let moment = require('moment'); //подключение библиотеки moment",
							"let currentDate = moment().format('YYYY-MM-DD HH:mm LL');",
							"console.log(currentDate)",
							"let responseDate = pm.response.headers.get('Date');",
							"let responseDateFormatted = moment(responseDate).format('YYYY-MM-DD HH:mm LL');",
							"console.log(responseDateFormatted)",
							"pm.test(\"Date header matches to current date\", function () {",
							"    pm.expect(responseDateFormatted).to.equal(currentDate);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "c06a851c-005e-4c88-b475-8b353072101c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json, text/plain, */*"
					},
					{
						"key": "Accept-Language",
						"value": "en-US,en;q=0.9,it-IT;q=0.8,it;q=0.7,fr-FR;q=0.6,fr;q=0.5,de-DE;q=0.4,de;q=0.3,ru;q=0.2"
					},
					{
						"key": "Connection",
						"value": "keep-alive"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Origin",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com"
					},
					{
						"key": "Referer",
						"value": "https://sqlverifier-50d286d70656.herokuapp.com/login"
					},
					{
						"key": "Sec-Fetch-Dest",
						"value": "empty"
					},
					{
						"key": "Sec-Fetch-Mode",
						"value": "cors"
					},
					{
						"key": "Sec-Fetch-Site",
						"value": "same-origin"
					},
					{
						"key": "User-Agent",
						"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Google Chrome\";v=\"119\", \"Chromium\";v=\"119\", \"Not?A_Brand\";v=\"24\""
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "sec-ch-ua-platform",
						"value": "\"macOS\""
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"{{adminLogin}}\",\"password\":\"{{adminPassword}}\",\"rememberMe\":false}"
				},
				"url": {
					"raw": "{{baseUrl}}/authenticate",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"authenticate"
					]
				}
			},
			"response": []
		},
		{
			"name": "create a task",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9d5776de-d1d5-4cf4-91ea-66598e553ab8",
						"exec": [
							"let jsonData = pm.response.json();",
							"",
							"",
							"pm.test(\"Your test name\", function () {",
							"    pm.expect(jsonData.text).to.eql(\"some text\");",
							"});",
							"",
							"pm.environment.set(\"task_id\", jsonData.id)",
							"",
							"let should = require('chai').should();",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"pm.response.code.should.equal(201);",
							"});",
							"",
							"pm.test(\"Status message is 'Created'\", function () {",
							"    pm.response.status.should.equal(\"Created\");",
							"});",
							"",
							"pm.test(\"Body matches string\", function () {",
							"    pm.response.text().should.include(\"title\");",
							"});",
							"",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    pm.response.headers.get(\"Content-Type\").should.equal(\"application/json\");",
							"});",
							"",
							"pm.test(\"Connection is close\", function () {",
							"    pm.response.headers.get(\"Connection\").should.equal(\"close\");",
							"});",
							"",
							"pm.test(\"X-Content-Type-Options is nosniff\", function(){",
							"    pm.response.headers.get(\"X-Content-Type-Options\").should.equal(\"nosniff\")",
							"});",
							"",
							"//Проверка даты в заголовке ответа на соответствие текущей дате(библиотека moment)",
							"let moment = require('moment');",
							"let currentDate = moment().format('YYYY-MM-DD HH:mm LL');",
							"console.log(currentDate)",
							"let responseDate = pm.response.headers.get('Date');",
							"let responseDateFormatted = moment(responseDate).format('YYYY-MM-DD HH:mm LL');",
							"console.log(responseDateFormatted)",
							"pm.test(\"Date header matches to current date\", function () {",
							"    pm.expect(responseDateFormatted).to.equal(currentDate);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "e75f1037-95be-4ba3-acb8-bc1844d24d15",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"text\": \"some text\",\n  \"answer\": \"string\",\n  \"title\": \"string\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "get tasks list",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a67c8193-2796-4c19-8659-f9f6ac332a2e",
						"exec": [
							"let assert = require('chai').assert;\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"assert.equal(pm.response.code, 200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    assert.equal(pm.response.status, \"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string 'Text\", function () {\r",
							"    assert.include(pm.response.text(), \"text\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    assert.equal(pm.response.headers.get(\"Content-Type\"), \"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Connection is close\", function (){\r",
							"    assert.equal(pm.response.headers.get(\"Connection\"), \"close\")\r",
							"});\r",
							"\r",
							"pm.test(\"X-Content-Type-Options is nosniff\", function (){\r",
							"    assert.equal(pm.response.headers.get(\"X-Content-Type-Options\"), \"nosniff\")\r",
							"});\r",
							"//Проверка даты в заголовке ответа на соответствие текущей дате(библиотека moment)\r",
							"let moment = require('moment');\r",
							"let currentDate = moment().format('YYYY-MM-DD HH:mm LL');\r",
							"console.log(currentDate)\r",
							"let responseDate = pm.response.headers.get('Date');\r",
							"let responseDateFormatted = moment(responseDate).format('YYYY-MM-DD HH:mm LL');\r",
							"console.log(responseDateFormatted)\r",
							"pm.test(\"Date header matches to current date\", function () {\r",
							"    pm.expect(responseDateFormatted).to.equal(currentDate);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "488ba875-94eb-4965-89ec-eaac11af32f4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks?page=0&size=100",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks"
					],
					"query": [
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "size",
							"value": "100"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "change task text",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0b43bf52-a679-44bc-9bca-ed9227fed707",
						"exec": [
							"let expect = require('chai').expect;\r",
							"let should = require('chai').should();\r",
							"let assert = require('chai').assert;\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"pm.test(\"Status message is OK\", function () {\r",
							"    pm.response.status.should.equal(\"OK\");\r",
							"});\r",
							"pm.test(\"Body matches string 'Text\", function () {\r",
							"    assert.include(pm.response.text(), \"text\");\r",
							"});\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");\r",
							"});\r",
							"pm.test(\"Connection is close\", function () {\r",
							"    pm.response.headers.get(\"Connection\").should.equal(\"close\");\r",
							"});\r",
							"pm.test(\"X-Content-Type-Options is nosniff\", function (){\r",
							"    assert.equal(pm.response.headers.get(\"X-Content-Type-Options\"), \"nosniff\")\r",
							"});\r",
							"\r",
							"//Проверка даты в заголовке ответа на соответствие текущей дате(библиотека moment)\r",
							"let moment = require('moment');\r",
							"let currentDate = moment().format('YYYY-MM-DD HH:mm LL');\r",
							"console.log(currentDate)\r",
							"let responseDate = pm.response.headers.get('Date');\r",
							"let responseDateFormatted = moment(responseDate).format('YYYY-MM-DD HH:mm LL');\r",
							"console.log(responseDateFormatted)\r",
							"pm.test(\"Date header matches to current date\", function () {\r",
							"    pm.expect(responseDateFormatted).to.equal(currentDate);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "373b2cad-2b90-4bc1-afc6-0080fed8a2a0",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": {{task_id}},\n  \"text\": \"some new new text\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/tasks/{{task_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get task data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e93d4e11-a203-4e6f-9a6f-e92b90cba305",
						"exec": [
							"let expect = require('chai').expect;",
							"let should = require('chai').should();",
							"let assert = require('chai').assert;",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    expect(pm.response.code).to.equal(200);",
							"});",
							"pm.test(\"Status message is OK\", function () {",
							"    pm.response.status.should.equal(\"OK\");",
							"});",
							"pm.test(\"Body matches string 'Text\", function () {",
							"    assert.include(pm.response.text(), \"text\");",
							"});",
							"pm.test(\"Content-Type is application/json\", function () {",
							"    expect(pm.response.headers.get(\"Content-Type\")).to.equal(\"application/json\");",
							"});",
							"pm.test(\"Connection is close\", function () {",
							"    pm.response.headers.get(\"Connection\").should.equal(\"close\");",
							"});",
							"pm.test(\"X-Content-Type-Options is nosniff\", function (){",
							"    assert.equal(pm.response.headers.get(\"X-Content-Type-Options\"), \"nosniff\")",
							"});",
							"//Проверка даты в заголовке ответа на соответствие текущей дате(библиотека moment)",
							"let moment = require('moment');",
							"let currentDate = moment().format('YYYY-MM-DD HH:mm LL');",
							"console.log(currentDate)",
							"let responseDate = pm.response.headers.get('Date');",
							"let responseDateFormatted = moment(responseDate).format('YYYY-MM-DD HH:mm LL');",
							"console.log(responseDateFormatted)",
							"pm.test(\"Date header matches to current date\", function () {",
							"    pm.expect(responseDateFormatted).to.equal(currentDate);",
							"});",
							"//удаление таски",
							"pm.sendRequest(",
							"    {url: 'https://sqlverifier-50d286d70656.herokuapp.com/api/tasks/3070',",
							"    method: 'DELETE',",
							"    header:",
							"    {'Authorization': 'Bearer ' + pm.environment.get('token'),",
							"    'accept': '*/*'}",
							"    }",
							"    , function (err, response) {",
							"    console.log(response);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"id": "245a042d-23e0-4393-9859-8c3409c3d246",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "accept",
						"value": "*/*"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTcwMDY1MTA3OCwiYXV0aCI6IlJPTEVfQURNSU4iLCJpYXQiOjE3MDA1NjQ2Nzh9.vIN53s5RHi0_NuFKchJ3Wxi3ajjjtTt_0X_qJSYtFti7Xw4Veqy9jEpRervasFgwCyrZGihIehGmwaUXLYIaFg"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/tasks/{{task_id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"tasks",
						"{{task_id}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "336545c8-77f3-4581-9a46-117be27de370"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "c13dd075-6e1f-4f68-912e-91da74986c5d"
			}
		}
	]
}